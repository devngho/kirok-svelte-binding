// CODE WAS GENERATED BY KIROK-SVELTE-BINDING. DO NOT EDIT.
//@ts-nocheck
//eslint-disable
//@formatter:off

import {writable} from 'svelte/store';

let instance: WebAssembly.Exports | null = null;

try {
    instance = await import('./index.mjs');
} catch (e) {
    console.error(e);
}

function serialize(value: any): string { return JSON.stringify(value); }
function deserialize(value: string): any { return JSON.parse(value); }
function serializeArgs(value: any[]): string { return JSON.stringify(value.map(value => JSON.stringify(value))); }

export function isAvailable(): boolean { return instance != null; }

export %modelasync%function useSync%modelname%(%modelinittype%): %modelpromisetype% | null {
    if (instance == null) return null

    //@ts-expect-error
    const _%modelname%instance = writable(deserialize(%modelawait%instance.init%modelname%(serializeArgs([%modelinitargs%]))))

    return [
        _%modelname%instance,
        {
            %modelintent%
        }
    ]
}

export function use%modelname%(%modelinittype%): %modellazytype% {
    if (instance == null) return null

    //@ts-expect-error
    const _%modelname%instance = writable({});

    (async () => {
        //@ts-expect-error
        _%modelname%instance.set(deserialize(%modelawait%instance.init%modelname%(serializeArgs([%modelinitargs%]))))
    })();

    return [
        _%modelname%instance,
        {
            %modelintent%
        }
    ]
}
